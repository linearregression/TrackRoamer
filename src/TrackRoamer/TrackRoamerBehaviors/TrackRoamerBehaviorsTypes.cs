//------------------------------------------------------------------------------
// TrackRoamerBehaviorsTypes.cs
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;

using Microsoft.Ccr.Core;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.Core.Attributes;
using dssp = Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.Core.DsspHttp;
using W3C.Soap;

using bumper = Microsoft.Robotics.Services.ContactSensor.Proxy;
using drive = Microsoft.Robotics.Services.Drive.Proxy;
using sicklrf = Microsoft.Robotics.Services.Sensors.SickLRF.Proxy;
using encoder = Microsoft.Robotics.Services.Encoder.Proxy;
using proxibrick = TrackRoamer.Robotics.Services.TrackRoamerBrickProximityBoard.Proxy;
using trackroamerbehaviors = TrackRoamer.Robotics.Services.TrackRoamerBehaviors;

namespace TrackRoamer.Robotics.Services.TrackRoamerBehaviors
{
    /// <summary>
    /// TrackRoamerBehaviors Contract
    /// </summary>
    public sealed class Contract
    {
        /// The Unique Contract Identifier for the TrackRoamerBehaviors service
		public const String Identifier = "http://schemas.trackroamer.com/robotics/2009/04/trackroamerbehaviors.html";
    }

    /// <summary>
    /// Track Roamer Behaviors Operations
    /// </summary>
    public class TrackRoamerBehaviorsOperations : PortSet<
		DsspDefaultLookup,
		DsspDefaultDrop,
		Get,
        HttpGet,
        BumperUpdate,
		BumpersArrayUpdate,
		DriveUpdate,
		EncoderUpdate,
		LaserRangeFinderUpdate,
		LaserRangeFinderResetUpdate,
		WatchDogUpdate
		>
    {
    }

	public class BumperUpdate : Update<bumper.ContactSensor, PortSet<DefaultUpdateResponseType, Fault>>
	{
		public BumperUpdate(bumper.ContactSensor body)
			: base(body)
		{ }

		public BumperUpdate()
		{ }
	}

	public class BumpersArrayUpdate : Update<bumper.ContactSensorArrayState, PortSet<DefaultUpdateResponseType, Fault>>
	{
		public BumpersArrayUpdate(bumper.ContactSensorArrayState body)
			: base(body)
		{ }

		public BumpersArrayUpdate()
		{ }
	}

	public class DriveUpdate : Update<drive.DriveDifferentialTwoWheelState, PortSet<DefaultUpdateResponseType, Fault>>
	{
		public DriveUpdate(drive.DriveDifferentialTwoWheelState body)
			: base(body)
		{ }

		public DriveUpdate()
		{ }
	}

	public class EncoderUpdate : Update<encoder.UpdateTickCountRequest, PortSet<DefaultUpdateResponseType, Fault>>
	{
		public int HardwareIdentifier = 0;

		public EncoderUpdate(encoder.UpdateTickCountRequest body, int hardwareIdentifier)
			: base(body)
		{
			HardwareIdentifier = hardwareIdentifier;
		}

		public EncoderUpdate()
		{ }
	}

	public class LaserRangeFinderUpdate : Update<sicklrf.State, PortSet<DefaultUpdateResponseType, Fault>>
	{
		public LaserRangeFinderUpdate(sicklrf.State body)
			: base(body)
		{ }

		public LaserRangeFinderUpdate()
		{ }
	}

	public class LaserRangeFinderResetUpdate : Update<sicklrf.ResetType, PortSet<DefaultUpdateResponseType, Fault>>
	{
		public LaserRangeFinderResetUpdate(sicklrf.ResetType body)
			: base(body)
		{ }

		public LaserRangeFinderResetUpdate()
		{ }
	}

	public class WatchDogUpdate : Update<WatchDogUpdateRequest, PortSet<DefaultUpdateResponseType, Fault>>
	{
		public WatchDogUpdate(WatchDogUpdateRequest body)
			: base(body)
		{ }

		public WatchDogUpdate()
		{ }
	}

	[DataContract]
	public class WatchDogUpdateRequest
	{
		private DateTime _timeStamp;

		[DataMember]
		public DateTime TimeStamp
		{
			get { return _timeStamp; }
			set { _timeStamp = value; }
		}

		public WatchDogUpdateRequest(DateTime timeStamp)
		{
			TimeStamp = timeStamp;
		}

		public WatchDogUpdateRequest()
		{
		}
	}

	[DataContract]
	public class WheelsEncoderState
	{
        [DataMember]
        public double? LeftDistance { get; set; }       // meters

		[DataMember]
        public double? LeftSpeed { get; set; }			// meters/sec, as reported by encoder

		[DataMember]
		public DateTime? LeftMostRecent { get; set; }

		[DataMember]
        public double? RightDistance { get; set; }      // meters

		[DataMember]
        public double? RightSpeed { get; set; }			// meters/sec, as reported by encoder

		[DataMember]
		public DateTime? RightMostRecent { get; set; }
	}

    /// <summary>
    /// DSS Get Definition
    /// </summary>
    public class Get : Get<dssp.GetRequestType, PortSet<TrackRoamerBehaviorsState, Fault>>
    {
    }

	[DisplayName("ChangeState")]
	[Description("Changes or indicates a change to the TrackRoamerBehaviors' entire state.")]
	public class Replace : Replace<TrackRoamerBehaviorsState, PortSet<DefaultReplaceResponseType, Fault>>
	{
	}


}
